@model DigitalScrumBoard.Models.ViewModels.ScrumBoardViewModel
@using DigitalScrumBoard.Data

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>Digital Scrum Board</title>
    <link href="~/Content/stylesheets/scrumboard.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-2.0.3.js"></script>
    <script src="~/Scripts/jquery-ui-1.9.2.js"></script>
    <script src="~/Scripts/jquery.balloon.js"></script>
    <script src="~/Scripts/digitalscrumboard.js"></script>
    <script src="~/Scripts/jquery-touch.js"></script>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" /> 
</head>
<body>
   <div id="container">
       <div id="NotDoneCol" class="droppableCol">
           <p class="colHeader">Not Done</p>
           @foreach (Story s in Model.Stories)
           {
               <div class="taskStoryContainer" data-storyid="@s.ID">
                   @foreach (Task t in s.Tasks.Where(t => t.CurrentCol == "NotDoneCol"))
                   {
                       @Html.Action("Index", "Task", new { task = t })
                   }
               </div>   
           }
       </div>
       <div id="InProgressCol" class="droppableCol">
           <p class="colHeader">In Progress</p>
           @foreach (Story s in Model.Stories)
           {
               <div class="taskStoryContainer" data-storyid="@s.ID">
                   @foreach (Task t in s.Tasks.Where(t => t.CurrentCol == "InProgressCol"))
                   {
                       @Html.Action("Index", "Task", new { task = t })
                   }
               </div>   
           }
       </div>
       <div id="InTestCol" class="droppableCol">
           <p class="colHeader">In Test/Awaiting Sign-Off</p>
           @foreach (Story s in Model.Stories)
           {
               <div class="taskStoryContainer" data-storyid="@s.ID">
                   @foreach (Task t in s.Tasks.Where(t => t.CurrentCol == "InTestCol"))
                   {
                       @Html.Action("Index", "Task", new { task = t })
                   }
               </div>   
           }
       </div>
       <div id="DoneCol" class="droppableCol">
           <p class="colHeader">Done :-)</p>
           @foreach (Story s in Model.Stories)
           {
               <div class="taskStoryContainer" data-storyid="@s.ID">
                   @foreach (Task t in s.Tasks.Where(t => t.CurrentCol == "DoneCol"))
                   {
                       @Html.Action("Index", "Task", new { task = t })
                   }
               </div>   
           }
       </div>
   </div>
</body>
</html>
