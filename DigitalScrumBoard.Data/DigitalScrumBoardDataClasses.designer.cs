#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DigitalScrumBoard.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DigitalScrumBoard.SqlDB")]
	public partial class DigitalScrumBoardDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSprint(Sprint instance);
    partial void UpdateSprint(Sprint instance);
    partial void DeleteSprint(Sprint instance);
    partial void InsertStory(Story instance);
    partial void UpdateStory(Story instance);
    partial void DeleteStory(Story instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    #endregion
		
		public DigitalScrumBoardDataClassesDataContext() : 
				base(global::DigitalScrumBoard.Data.Properties.Settings.Default.aspnetdbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DigitalScrumBoardDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DigitalScrumBoardDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DigitalScrumBoardDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DigitalScrumBoardDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Sprint> Sprints
		{
			get
			{
				return this.GetTable<Sprint>();
			}
		}
		
		public System.Data.Linq.Table<Story> Stories
		{
			get
			{
				return this.GetTable<Story>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprint")]
	public partial class Sprint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Goals;
		
		private EntitySet<Story> _Stories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGoalsChanging(string value);
    partial void OnGoalsChanged();
    #endregion
		
		public Sprint()
		{
			this._Stories = new EntitySet<Story>(new Action<Story>(this.attach_Stories), new Action<Story>(this.detach_Stories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goals", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				if ((this._Goals != value))
				{
					this.OnGoalsChanging(value);
					this.SendPropertyChanging();
					this._Goals = value;
					this.SendPropertyChanged("Goals");
					this.OnGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_Story", Storage="_Stories", ThisKey="ID", OtherKey="SprintId")]
		public EntitySet<Story> Stories
		{
			get
			{
				return this._Stories;
			}
			set
			{
				this._Stories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_Stories(Story entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Story")]
	public partial class Story : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private int _SprintId;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSprintIdChanging(int value);
    partial void OnSprintIdChanged();
    #endregion
		
		public Story()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintId", DbType="Int NOT NULL")]
		public int SprintId
		{
			get
			{
				return this._SprintId;
			}
			set
			{
				if ((this._SprintId != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIdChanging(value);
					this.SendPropertyChanging();
					this._SprintId = value;
					this.SendPropertyChanged("SprintId");
					this.OnSprintIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_Task", Storage="_Tasks", ThisKey="ID", OtherKey="StoryID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_Story", Storage="_Sprint", ThisKey="SprintId", OtherKey="ID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.Stories.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.Stories.Add(this);
						this._SprintId = value.ID;
					}
					else
					{
						this._SprintId = default(int);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Story = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Story = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private int _Left;
		
		private int _Top;
		
		private int _Type;
		
		private int _OwnerID;
		
		private int _StoryID;
		
		private string _CurrentCol;
		
		private int _TimeRemaining;
		
		private EntityRef<Story> _Story;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnLeftChanging(int value);
    partial void OnLeftChanged();
    partial void OnTopChanging(int value);
    partial void OnTopChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnStoryIDChanging(int value);
    partial void OnStoryIDChanged();
    partial void OnCurrentColChanging(string value);
    partial void OnCurrentColChanged();
    partial void OnTimeRemainingChanging(int value);
    partial void OnTimeRemainingChanged();
    #endregion
		
		public Task()
		{
			this._Story = default(EntityRef<Story>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Left]", Storage="_Left", DbType="Int NOT NULL")]
		public int Left
		{
			get
			{
				return this._Left;
			}
			set
			{
				if ((this._Left != value))
				{
					this.OnLeftChanging(value);
					this.SendPropertyChanging();
					this._Left = value;
					this.SendPropertyChanged("Left");
					this.OnLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Top]", Storage="_Top", DbType="Int NOT NULL")]
		public int Top
		{
			get
			{
				return this._Top;
			}
			set
			{
				if ((this._Top != value))
				{
					this.OnTopChanging(value);
					this.SendPropertyChanging();
					this._Top = value;
					this.SendPropertyChanged("Top");
					this.OnTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoryID", DbType="Int NOT NULL")]
		public int StoryID
		{
			get
			{
				return this._StoryID;
			}
			set
			{
				if ((this._StoryID != value))
				{
					if (this._Story.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoryIDChanging(value);
					this.SendPropertyChanging();
					this._StoryID = value;
					this.SendPropertyChanged("StoryID");
					this.OnStoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCol", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CurrentCol
		{
			get
			{
				return this._CurrentCol;
			}
			set
			{
				if ((this._CurrentCol != value))
				{
					this.OnCurrentColChanging(value);
					this.SendPropertyChanging();
					this._CurrentCol = value;
					this.SendPropertyChanged("CurrentCol");
					this.OnCurrentColChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeRemaining", DbType="Int NOT NULL")]
		public int TimeRemaining
		{
			get
			{
				return this._TimeRemaining;
			}
			set
			{
				if ((this._TimeRemaining != value))
				{
					this.OnTimeRemainingChanging(value);
					this.SendPropertyChanging();
					this._TimeRemaining = value;
					this.SendPropertyChanged("TimeRemaining");
					this.OnTimeRemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Story_Task", Storage="_Story", ThisKey="StoryID", OtherKey="ID", IsForeignKey=true)]
		public Story Story
		{
			get
			{
				return this._Story.Entity;
			}
			set
			{
				Story previousValue = this._Story.Entity;
				if (((previousValue != value) 
							|| (this._Story.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Story.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Story.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._StoryID = value.ID;
					}
					else
					{
						this._StoryID = default(int);
					}
					this.SendPropertyChanged("Story");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
